version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: notifications-postgres
    environment:
      POSTGRES_DB: notifications_hub
      POSTGRES_USER: notifications_user
      POSTGRES_PASSWORD: notifications_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notifications_user -d notifications_hub"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Queue Management
  redis:
    image: redis:7-alpine
    container_name: notifications-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: notifications-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://notifications_user:notifications_pass@postgres:5432/notifications_hub
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=3001
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (served by nginx in production)
  frontend:
    image: nginx:alpine
    container_name: notifications-frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data:
